#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Thu Aug 25 02:14:35 2016
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn bluetoothctl
match_max 100000
expect -exact "\[?1034h\[bluetooth\]# \r\[0;94m\[bluetooth\]\[0m# \r\[K\[\[0;92mNEW\[0m\] Controller 00:15:83:E6:69:7E DevOS72 \[default\]\r
\[0;94m\[bluetooth\]\[0m# \r\[K\[\[0;92mNEW\[0m\] Device BC:E5:9F:76:30:F3 S3500D CUTE\r
\[0;94m\[bluetooth\]\[0m# "
send -- "agent on\r"
expect -exact "agent on\r
\[0;94m\[bluetooth\]\[0m# \r\[KAgent registered\r
\[0;94m\[bluetooth\]\[0m# "
send -- "discoverable on\r"
expect -exact "discoverable on\r
\[0;94m\[bluetooth\]\[0m# \r\[KChanging discoverable on succeeded\r
\[0;94m\[bluetooth\]\[0m# "
send -- "paraible on\r"
expect -exact "paraible on\r
Invalid command\r
\[0;94m\[bluetooth\]\[0m# "
send -- "default-agent\r"
expect -exact "default-agent\r
\[0;94m\[bluetooth\]\[0m# \r\[KDefault agent request successful\r
\[0;94m\[bluetooth\]\[0m# "
send -- "power on\r"
expect -exact "power on\r
\[0;94m\[bluetooth\]\[0m# \r\[KChanging power on succeeded\r
\[0;94m\[bluetooth\]\[0m# "
send -- "heeeelloo\r"
expect -exact "heeeelloo\r
Invalid command\r
\[0;94m\[bluetooth\]\[0m# "
send -- "show\r"
expect -exact "show\r
Controller 00:15:83:E6:69:7E\r
	Name: DevOS72\r
	Alias: DevOS72\r
	Class: 0x1c041c\r
	Powered: yes\r
	Discoverable: yes\r
	Pairable: yes\r
	UUID: PnP Information           (00001200-0000-1000-8000-00805f9b34fb)\r
	UUID: Generic Access Profile    (00001800-0000-1000-8000-00805f9b34fb)\r
	UUID: Generic Attribute Profile (00001801-0000-1000-8000-00805f9b34fb)\r
	UUID: A/V Remote Control        (0000110e-0000-1000-8000-00805f9b34fb)\r
	UUID: A/V Remote Control Target (0000110c-0000-1000-8000-00805f9b34fb)\r
	UUID: Message Notification Se.. (00001133-0000-1000-8000-00805f9b34fb)\r
	UUID: Message Access Server     (00001132-0000-1000-8000-00805f9b34fb)\r
	UUID: Phonebook Access Server   (0000112f-0000-1000-8000-00805f9b34fb)\r
	UUID: IrMC Sync                 (00001104-0000-1000-8000-00805f9b34fb)\r
	UUID: OBEX File Transfer        (00001106-0000-1000-8000-00805f9b34fb)\r
	UUID: OBEX Object Push          (00001105-0000-1000-8000-00805f9b34fb)\r
	UUID: Audio Source              (0000110a-0000-1000-8000-00805f9b34fb)\r
	UUID: Audio Sink                (0000110b-0000-1000-8000-00805f9b34fb)\r
	UUID: Headset AG                (00001112-0000-1000-8000-00805f9b34fb)\r
	Modalias: usb:v1D6Bp0246d0517\r
	Discovering: no\r
\[0;94m\[bluetooth\]\[0m# \r\[K\[\[0;93mCHG\[0m\] Device BC:E5:9F:76:30:F3 Connected: yes\r
\[0;94m\[bluetooth\]\[0m# \r\[KRequest confirmation\r
\[0;94m\[bluetooth\]\[0m# \r\[K\[0;91m\[agent\]\[0m Confirm passkey 614896 (yes/no): "
send -- "yes\r"
expect -exact "yes\r
\[0;94m\[bluetooth\]\[0m# \r\[KAuthorize service\r
\[0;94m\[bluetooth\]\[0m# \r\[K\[0;91m\[agent\]\[0m Authorize service 0000110d-0000-1000-8000-00805f9b34fb (yes/no\ro): "
send -- "yes\r"
expect -exact "yes\r
\[0;94m\[bluetooth\]\[0m# \r\[K\[\[0;93mCHG\[0m\] Device BC:E5:9F:76:30:F3 Connected: no\r
\[0;94m\[bluetooth\]\[0m# "
send -- "devic	"
expect -exact "es "
send -- "\r"
expect -exact "\r
Device BC:E5:9F:76:30:F3 S3500D CUTE\r
\[0;94m\[bluetooth\]\[0m# "
send -- "quit\r"
expect eof
